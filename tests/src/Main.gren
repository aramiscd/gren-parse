module Main exposing ( main )

import Expect
import Fuzz
import Test exposing ( test )
import Test.Runner.Node

import Parse


main =
    Test.Runner.Node.run tests


tests =
    Test.concat
        -------------------------------------------------------------------------------------------------------------
        [ Test.fuzz Fuzz.string
            "Parse.string: ist erfolgreich bei übereinstimmenden Strings"
            ( \ match ->
                Parse.string match match
                    |> Expect.equal
                        ( Just {backlog = "", values = [ match ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.string: scheitert wenn der zu parsende String kein Präfix der Eingabe ist"
            ( \ match input ->
                Parse.string match input
                    |> if String.startsWith match input
                        then ( \ _ -> Expect.pass )
                        else Expect.equal Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.fail: scheitert bei allen Eingaben"
            ( \ input ->
                Parse.fail input
                    |> Expect.equal
                         Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.succed: ist erfolgreich bei allen Eingaben"
            ( \ match input ->
                Parse.succeed [ match ] input
                    |> Expect.equal
                        ( Just { backlog = input, values = [ match ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.eitherOr: ist erfolgreich wenn der erste Parser erfolgreich ist"
            ( \ match ->
                Parse.eitherOr ( Parse.string match ) Parse.fail match
                    |> Expect.equal
                        ( Just { backlog = "", values = [ match ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.eitherOr: ist erfolgreich wenn der zweite Parser erfolgreich ist"
            ( \ match ->
                Parse.eitherOr Parse.fail ( Parse.string match ) match
                    |> Expect.equal
                        ( Just { backlog = "", values = [ match ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.eitherOr: scheitert wenn beide Parser scheitern"
            ( \ input ->
                Parse.eitherOr Parse.fail Parse.fail input
                    |> Expect.equal
                        Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOf: wendet den ersten erfolgreichen Parser an"
            ( \ _ ->
                Parse.oneOf
                    [ Parse.string "a"
                    , Parse.string "b"
                    , Parse.string "c"
                    , Parse.string "d"
                    , Parse.string "e"
                    ]
                    "cola"
                    |> Expect.equal
                        ( Just { backlog = "ola", values = [ "c" ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOf: scheitert wenn alle Parser scheitern"
            ( \ _ ->
                Parse.oneOf
                    [ Parse.string "a"
                    , Parse.string "b"
                    , Parse.string "c"
                    , Parse.string "d"
                    , Parse.string "e"
                    ]
                    "f"
                    |> Expect.equal
                        Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.skip: verwirft den geparsten Wert"
            ( \ match ->
                Parse.skip ( Parse.string match ) match
                    |> Expect.equal
                        ( Just { backlog = "", values = [] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.skip: scheitert wenn der innere Parser scheitert"
            ( \ match input ->
                Parse.skip ( Parse.string match ) input
                    |> if String.startsWith match input
                        then ( \ _ -> Expect.pass )
                        else Expect.equal Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.optional: ist erfolgreich wenn der innere Parser erfolgreich ist"
            ( \ match ->
                Parse.optional ( Parse.string match ) match
                    |> Expect.equal
                        ( Just { backlog = "", values = [ match ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.optional: ist erfolgreich wenn der innere Parser scheitert"
            ( \ match input ->
                Parse.optional ( Parse.string match ) input
                    |> if String.startsWith match input
                        then ( \ _ -> Expect.pass )
                        else Expect.equal ( Just { backlog = input, values = [] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.sequence: wendet alle inneren Parser der Reihe nach an"
            ( \ _ ->
                Parse.sequence
                    [ Parse.string "a"
                    , Parse.string "b"
                    , Parse.string "c"
                    , Parse.string "d"
                    , Parse.string "e"
                    ]
                    "abcdef"
                    |> Expect.equal
                        ( Just { backlog = "f", values = [ "a", "b", "c", "d", "e" ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.sequence: scheitert wenn ein innerer Parser scheitert"
            ( \ _ ->
                Parse.sequence
                    [ Parse.string "a"
                    , Parse.string "b"
                    , Parse.string "c"
                    , Parse.string "d"
                    , Parse.string "e"
                    ]
                    "abcXef"
                    |> Expect.equal
                        Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz ( Fuzz.intRange 1 99 )
            "Parse.oneOrMore: wendet den inneren Parser möglichst oft an"
            ( \ n ->
                Parse.oneOrMore ( Parse.string "a" ) ( String.repeat n "a" ++ "x" )
                    |> Expect.equal
                        ( Just { backlog = "x", values = Array.repeat n "a" } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOrMore: scheitert wenn der innere Parser gleich am Anfang scheitert"
            ( \ _ ->
                Parse.oneOrMore ( Parse.string "a" ) "xxx"
                    |> Expect.equal
                        Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz ( Fuzz.intRange 0 99 )
            "Parse.zeroOrMore: wendet den inneren Parser möglichst oft an"
            ( \ n ->
                Parse.zeroOrMore ( Parse.string "a" )
                    ( String.repeat n "a" ++ "x" )
                    |> Expect.equal
                        ( Just { backlog = "x", values = Array.repeat n "a" } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.zeroOrMore: ist erfolgreich wenn der innere Parser gleich am Anfang scheitert"
            ( \ _ ->
                Parse.zeroOrMore ( Parse.string "a" ) "xxx"
                    |> Expect.equal
                        ( Just { backlog = "xxx", values = [] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: scheitert wenn der innere Parser scheitert"
            ( \ _ ->
                Parse.map ( \ x -> x ) ( Parse.string "a" ) "xxx"
                    |> Expect.equal
                        Nothing
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: ist erfolgreich wenn der innere Parser erfolgreich ist"
            ( \ _ ->
                Parse.map ( \ x -> x ) ( Parse.string "a" ) "abc"
                    |> Expect.equal
                        ( Just { backlog = "bc", values = [ "a" ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: operiert auf dem geparsten Wert"
            ( \ _ ->
                Parse.map ( Array.map String.toUpper ) ( Parse.string "a" ) "abc"
                    |> Expect.equal
                        ( Just { backlog = "bc", values = [ "A" ] } )
            )
        -------------------------------------------------------------------------------------------------------------
        -- todo: Parse.andThen
        -------------------------------------------------------------------------------------------------------------
        ]
