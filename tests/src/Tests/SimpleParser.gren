module Tests.SimpleParser exposing ( tests )

import Expect
import Fuzz
import Test exposing ( test )

import SimpleParser as Parse


tests =
    Test.concat
        -------------------------------------------------------------------------------------------------------------
-- string
        -------------------------------------------------------------------------------------------------------------
        [ Test.fuzz Fuzz.string
            "Parse.string: ist erfolgreich bei übereinstimmenden Strings"
            <| \ match ->
                let
                    actual = Parse.string match match
                    expected = Just { backlog = "", values = [ match ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.string: scheitert wenn der zu parsende String kein Präfix der Eingabe ist"
            <| \ match input ->
                if String.startsWith match input then Expect.pass
                else
                    let
                        actual = Parse.string match input
                        expected = Nothing
                    in
                        Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- fail
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.fail: scheitert bei allen Eingaben"
            <| \ input ->
                let
                    actual = Parse.fail input
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- succeed
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.succeed: ist erfolgreich bei allen Eingaben"
            <| \ match input ->
                let
                    actual = Parse.succeed [ match ] input
                    expected = Just { backlog = input, values = [ match ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- skip
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.skip: verwirft den geparsten Wert"
            <| \ match ->
                let
                    actual = Parse.skip ( Parse.string match ) match
                    expected = Just { backlog = "", values = [] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.skip: scheitert wenn der innere Parser scheitert"
            <| \ match input ->
                if String.startsWith match input then Expect.pass
                else
                    let
                        actual = Parse.skip ( Parse.string match ) input
                        expected = Nothing
                    in
                        Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- optional
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.optional: ist erfolgreich wenn der innere Parser erfolgreich ist"
            <| \ match ->
                let
                    actual = Parse.optional ( Parse.string match ) match
                    expected = Just { backlog = "", values = [ match ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz2 Fuzz.string Fuzz.string
            "Parse.optional: ist erfolgreich wenn der innere Parser scheitert"
            <| \ match input ->
                if String.startsWith match input then Expect.pass
                else
                    let
                        actual = Parse.optional ( Parse.string match ) input
                        expected = Just { backlog = input, values = [] }
                    in
                        Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- zeroOrMore
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz ( Fuzz.intRange 0 99 )
            "Parse.zeroOrMore: wendet den inneren Parser möglichst oft an"
            <| \ n ->
                let
                    actual = Parse.zeroOrMore ( Parse.string "a" ) ( String.repeat n "a" ++ "x" )
                    expected = Just { backlog = "x", values = Array.repeat n "a" }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.zeroOrMore: ist erfolgreich wenn der innere Parser gleich am Anfang scheitert"
            <| \ _ ->
                let
                    actual = Parse.zeroOrMore ( Parse.string "a" ) "xxx"
                    expected = Just { backlog = "xxx", values = [] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- oneOrMore
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz ( Fuzz.intRange 1 99 )
            "Parse.oneOrMore: wendet den inneren Parser möglichst oft an"
            <| \ n ->
                let
                    actual = Parse.oneOrMore ( Parse.string "a" ) ( String.repeat n "a" ++ "x" )
                    expected = Just { backlog = "x", values = Array.repeat n "a" }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOrMore: scheitert wenn der innere Parser gleich am Anfang scheitert"
            <| \ _ ->
                let
                    actual = Parse.oneOrMore ( Parse.string "a" ) "xxx"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- oneOf
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOf: wendet den ersten erfolgreichen Parser an"
            <| \ _ ->
                let
                    parse =
                        Parse.oneOf
                            [ Parse.string "a"
                            , Parse.string "b"
                            , Parse.string "c"
                            , Parse.string "d"
                            , Parse.string "e"
                            ]

                    actual = parse "cola"
                    expected = Just { backlog = "ola", values = [ "c" ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOf: scheitert wenn alle Parser scheitern"
            <| \ _ ->
                let
                    parse = 
                        Parse.oneOf
                            [ Parse.string "a"
                            , Parse.string "b"
                            , Parse.string "c"
                            , Parse.string "d"
                            , Parse.string "e"
                            ]

                    actual = parse "f"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.oneOf: lässt den Call Stack nicht überlaufen"
            -- Hinweis: Ich habe den Unterschied geprüft.
            -- Wenn ich oneOf ohne oneOfHelper als Faltung über eitherOr ausdrücke,
            -- dann läuft schon für für n = 9999 der Call Stack über.
            <| \ _ ->
                let
                    n = 9999
                    value = "x"
                    parse = Parse.oneOf ( Array.repeat n ( Parse.string value ) )
                    input = "y"

                    actual = parse input
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- sequence
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.sequence: wendet alle inneren Parser der Reihe nach an"
            <| \ _ ->
                let
                    parse = 
                        Parse.sequence
                            [ Parse.string "a"
                            , Parse.string "b"
                            , Parse.string "c"
                            , Parse.string "d"
                            , Parse.string "e"
                            ]

                    actual = parse "abcdef"
                    expected = Just { backlog = "f", values = [ "a", "b", "c", "d", "e" ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.sequence: scheitert wenn ein innerer Parser scheitert"
            <| \ _ ->
                let
                    parse =
                        Parse.sequence
                            [ Parse.string "a"
                            , Parse.string "b"
                            , Parse.string "c"
                            , Parse.string "d"
                            , Parse.string "e"
                            ]
                    
                    actual = parse "abcXef"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.sequence: lässt den Call Stack nicht überlaufen"
            -- Hinweis: Ich habe den Unterschied geprüft.
            -- Wenn ich sequence ohne sequenceHelper als Faltung über pair ausdrücke,
            -- dann läuft schon für für n = 9999 der Call Stack über.
            -- 
            -- todo: Vermutlich macht die Arrayverkettung (++) die Sache so langsam.
            <| \ _ ->
                let
                    n = 9999
                    value = "x"
                    parse = Parse.sequence ( Array.repeat n ( Parse.string value ) )
                    input = String.join "" ( Array.repeat n value )

                    actual = parse input
                    expected = Just { backlog = "", values = Array.repeat n value }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- map
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: scheitert wenn der innere Parser scheitert"
            <| \ _ ->
                let
                    actual = Parse.map ( \ x -> x ) ( Parse.string "a" ) "xxx"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: ist erfolgreich wenn der innere Parser erfolgreich ist"
            <| \ _ ->
                let
                    actual = Parse.map ( \ x -> x ) ( Parse.string "a" ) "abc"
                    expected = Just { backlog = "bc", values = [ "a" ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.map: operiert auf dem geparsten Wert"
            <| \ _ ->
                let
                    actual = Parse.map ( Array.map String.toUpper ) ( Parse.string "a" ) "abc"
                    expected = Just { backlog = "bc", values = [ "A" ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- andThen
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.andThen: operiert auf dem ParseResult"
            <| \ match ->
                let
                    parse = 
                        Parse.andThen
                            ( \ r -> Just { backlog = r.backlog, values = [ 123 ] } )
                            ( Parse.string match )

                    actual = parse match
                    expected = Just { backlog = "", values = [ 123 ] }
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , Test.fuzz Fuzz.string
            "Parse.andThen: kann den Parser scheitern lassen"
            <| \ match ->
                let
                    actual = Parse.andThen ( \ r -> Nothing ) ( Parse.string match ) match
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
-- run
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.run: ein Ergebnis, vollständig geparste Eingabe"
            <| \ _ ->
                let
                    actual = Parse.run ( Parse.string "abc" ) "abc"
                    expected = Just "abc"
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.run: ein Ergebnis, unvollständig geparste Eingabe > akzeptiert"
            <| \ _ ->
                let
                    actual = Parse.run ( Parse.string "abc" ) "abcd"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.run: mehrere Ergebnisse, unvollständig geparste Eingabe > abgelehnt"
            <| \ _ ->
                let
                    actual = Parse.run ( Parse.sequence [ Parse.string "a", Parse.string "b" ] ) "abcd"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.run: mehrere Ergebnisse, vollständig geparste Eingabe > abgelehnt"
            <| \ _ ->
                let
                    actual = Parse.run ( Parse.sequence [ Parse.string "ab", Parse.string "cd" ] ) "abcd"
                    expected = Nothing
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        , test
            "Parse.run: aggregiertes Ergebnis, vollständig geparste Eingabe > akzeptiert"
            <| \ _ ->
                let
                    parse = 
                        Parse.sequence [ Parse.string "ab", Parse.string "cd" ]
                        |> Parse.map ( String.join "" >> Array.singleton )

                    actual = Parse.run parse "abcd"
                    expected = Just "abcd"
                in
                    Expect.equal expected actual
        -------------------------------------------------------------------------------------------------------------
        ]
